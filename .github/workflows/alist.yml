name: Download and Compress Alist with UPX
on:
  workflow_dispatch:
    inputs:
      upx_args:
        description: 'UPX compression parameters (e.g. -9 --best)'
        required: false
        default: '-9'

jobs:
  compress:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Alist release info
        id: get_alist
        run: |
          RELEASE_JSON=$(curl -sL "https://api.github.com/repos/AlistGo/alist/releases/latest")
          VERSION=$(jq -r '.tag_name | ltrimstr("v")' <<< "$RELEASE_JSON")
          URL=$(jq -r '.assets[] | select(.name == "alist-linux-musl-arm64.tar.gz").browser_download_url' <<< "$RELEASE_JSON")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Download and extract Alist
        run: |
          curl -L -o alist.tar.gz "${{ steps.get_alist.outputs.url }}"
          tar zxvf alist.tar.gz
          rm alist.tar.gz
          chmod +x alist

      - name: Get UPX release info
        id: get_upx
        run: |
          RELEASE_JSON=$(curl -sL "https://api.github.com/repos/upx/upx/releases/latest")
          VERSION=$(jq -r '.tag_name' <<< "$RELEASE_JSON")
          URL=$(jq -r '.assets[] | select(.name | endswith("amd64_linux.tar.xz")).browser_download_url' <<< "$RELEASE_JSON")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Install UPX
        run: |
          curl -L -o upx.tar.xz "${{ steps.get_upx.outputs.url }}"
          tar -xJOf upx.tar.xz "upx-${${steps.get_upx.outputs.version}#v}-amd64_linux/upx" > upx
          chmod +x upx
          ./upx --version

      - name: Compress executable
        run: |
          ./upx ${{ github.event.inputs.upx_args }} alist
          ./upx -t alist || (echo "::error::Compression verification failed"; exit 1)

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: alist_${{ steps.get_alist.outputs.version }}_upx
          path: alist
